{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/marcossbalbino/progamacaocompython/blob/main/Exercicios%20aula%20dia%2018/10\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Exercícios utilizando Listas Python**"
      ],
      "metadata": {
        "id": "Fv1r44TLwVKM"
      }
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "2KSQ8LePinzw"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 1. Soma dos Elementos da Lista\n",
        "Dada uma lista de números, calcule a soma de todos os elementos."
      ],
      "metadata": {
        "id": "b9nEDJF0wjrc"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 21,
      "metadata": {
        "id": "woHYcqQCwA-u",
        "outputId": "9ba1e29e-8fa4-442d-fb3e-2850e04340b7",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "15\n"
          ]
        }
      ],
      "source": [
        "lista = [1, 2, 3, 4, 5]\n",
        "valor_total = sum(lista)\n",
        "print(valor_total)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 2. Produto dos elementos da lista\n",
        "Dada uma lista de números, calcule o produto de todos os elementos."
      ],
      "metadata": {
        "id": "jRKcmWKiw0z8"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "lista2 = [1, 2, 3, 4, 5]\n",
        "produto = sum(lista2)/ len(lista2)\n",
        "print(produto)"
      ],
      "metadata": {
        "id": "fLbEGjowwaZe",
        "outputId": "3e4845d3-be0a-4aa1-c3ea-8ae4530e7a4e",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "3.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 3. Encontre o menor elemento\n",
        "Dada uma lista de números, encontre o menor elemento."
      ],
      "metadata": {
        "id": "-Er6OsAyxFQj"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "lista3 = [1, 2, 3, 4, 5]\n",
        "menor = min(lista)\n",
        "print(menor)\n",
        ""
      ],
      "metadata": {
        "id": "KVoiJ_u0xKvc",
        "outputId": "fb88e634-9c0a-42a8-fc10-fe8d6f7d518a",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 4. Encontre o maior elemento\n",
        "Dada uma lista de números, encontre o maior elemento."
      ],
      "metadata": {
        "id": "WXYaMI7FxQXk"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "lista4 = [1, 2, 3, 4, 5]\n",
        "maior = max(lista)\n",
        "print(maior)"
      ],
      "metadata": {
        "id": "DoNhSLyuxb19",
        "outputId": "c5a155ff-dc05-4b61-da5e-e1f71e08c829",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "5\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 5. Contar Ocorrências de um Elemento\n",
        "Dada uma lista de números e um número alvo, conte quantas vezes o alvo aparece na lista."
      ],
      "metadata": {
        "id": "BkHVHCiPxgTs"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "lista5 = [1, 2, 3, 4, 3, 2, 1]\n",
        "contagem = {}\n",
        "for letras in lista5:\n",
        "  contagem[letras] = contagem.get(letras,0) + 1\n",
        "print('Quantidade de letras : ',contagem)"
      ],
      "metadata": {
        "id": "Hreq56gixmYC",
        "outputId": "6f1207e6-af88-4036-8b80-61e1c799acc8",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Quantidade de letras :  {1: 2, 2: 2, 3: 2, 4: 1}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 6. Remover duplicatas\n",
        "Dada uma lista de números, crie uma nova lista sem elementos duplicados."
      ],
      "metadata": {
        "id": "zSsy12F-xrVT"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "lista6 = [1, 2, 2, 3, 4, 4, 5]\n",
        "lista6 = list(set(lista6))\n",
        "print(lista6)"
      ],
      "metadata": {
        "id": "9N35r8abxydM",
        "outputId": "3748cd8f-93ff-4a9d-ea6a-89048b2d096c",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1, 2, 3, 4, 5]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 7. Inverter uma lista\n",
        "Dada uma lista de números, inverta a ordem dos elementos."
      ],
      "metadata": {
        "id": "Ev1YAUF9x3o8"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Seu código aqui...\n",
        "lista6 = [1, 2, 3, 4, 5]\n",
        "lista6.reverse()\n",
        "print(lista6)"
      ],
      "metadata": {
        "id": "X8YLy9uqx9kz",
        "outputId": "d0dc3d18-5104-447f-8f30-4d8ed1faa597",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[5, 4, 3, 2, 1]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 8. Intercalar Duas Listas\n",
        "Dadas duas listas de números, crie uma nova lista intercalando os elementos das duas listas."
      ],
      "metadata": {
        "id": "1k2bPDTPyB-L"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "lista81 = [1, 3, 5]\n",
        "lista82 = [2, 4, 6]\n",
        "lista8 = lista81[0] , lista82[0] , lista81[1] , lista82[1] , lista81[2] , lista82[2]\n",
        "print(lista8)"
      ],
      "metadata": {
        "id": "TXajIrGxyH3j",
        "outputId": "b02b41e7-fcbb-4c06-d966-4b04635d1363",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(1, 2, 3, 4, 5, 6)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 9. Somar Elementos Correspondentes de Duas Listas\n",
        "Dadas duas listas de números de mesmo tamanho, crie uma nova lista com a soma dos elementos correspondentes."
      ],
      "metadata": {
        "id": "ewiPtV9MyP1q"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "lista91 = [1, 2, 3]\n",
        "lista92 = [4, 5, 6]\n",
        "lista9 = [lista91[0] + lista92[0], lista91[1] + lista92[1], lista91[2] + lista92[2]]\n",
        "print(lista9)"
      ],
      "metadata": {
        "id": "0-4qe89uyVWT",
        "outputId": "278e656d-4627-47a2-cb87-6e0bb92a4c5d",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[5, 7, 9]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 10. Mover Zeros para o Fim\n",
        "Dada uma lista de números, mova todos os zeros para o final da lista."
      ],
      "metadata": {
        "id": "QX-QkQg5ybQa"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "lista10 = [0, 1, 0, 3, 12]\n",
        "lista10.sort(reverse=0)\n",
        "lista10.reverse()\n",
        "print(lista10)"
      ],
      "metadata": {
        "id": "i8jHZT30ygD6",
        "outputId": "c0d1e050-8270-4cb3-9dc1-896fde36a29a",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[12, 3, 1, 0, 0]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# laços condicionais\n"
      ],
      "metadata": {
        "id": "7XoF_VY9ipAC"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Tuplas - Acesso e Desempacotamento\n",
        "\n",
        "1) Crie uma tupla contendo três tipos diferentes de dados: um número, uma string e uma lista. Use um laço de repetição para acessar e imprimir cada item da tupla. Além disso, dentro do laço, acesse e imprima o segundo item da lista que está dentro da tupla."
      ],
      "metadata": {
        "id": "PeXmMpeViwwf"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "dados = (24, \"Cíntia\",[1,2,3])\n",
        "\n",
        "for i in dados:\n",
        "  print(i)"
      ],
      "metadata": {
        "id": "rHBV0Yw0iyU-",
        "outputId": "b6003e56-687f-48ff-c8b3-4a1bd11578b6",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "24\n",
            "Cíntia\n",
            "[1, 2, 3]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"segundo item:\", dados[1])"
      ],
      "metadata": {
        "id": "Y9F6e-NmrqP5",
        "outputId": "7c740fba-857d-43f5-c2b5-998412fe19b6",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "segundo item: Cíntia\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Dicionários - Criação e Acesso\n",
        "Cadastro de Pessoas e Análise de Alturas\n",
        "2) Solicite ao usuário para inserir o nome e a altura de várias pessoas. Preencha um dicionário com essas informações e depois encontre e imprima o nome e a altura da pessoa mais alta e da mais baixa."
      ],
      "metadata": {
        "id": "vHewzSnDiy1F"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "pessoas = {}\n",
        "\n",
        "while True:\n",
        "    nome = input(\"Insira o nome da pessoa (ou digite 'sair' para encerrar): \")\n",
        "    if nome.lower() == 'sair':\n",
        "        break\n",
        "    altura = float(input(f\"Insira a altura de {nome} em metros: \"))\n",
        "    pessoas[nome] = altura\n",
        "\n",
        "if pessoas:\n",
        "    mais_alta = max(pessoas, key=pessoas.get)\n",
        "    mais_baixa = min(pessoas, key=pessoas.get)\n",
        "\n",
        "    print(f\"A pessoa mais alta é {mais_alta} com {pessoas[mais_alta]} metros.\")\n",
        "    print(f\"A pessoa mais baixa é {mais_baixa} com {pessoas[mais_baixa]} metros.\")\n",
        "else:\n",
        "    print(\"Nenhuma pessoa foi cadastrada.\")"
      ],
      "metadata": {
        "id": "hMKPVEGVi570",
        "outputId": "dfc44116-5033-4dec-9772-2daff604f1f1",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Insira o nome da pessoa (ou digite 'sair' para encerrar): depay\n",
            "Insira a altura de depay em metros: 1.57\n",
            "Insira o nome da pessoa (ou digite 'sair' para encerrar): yuri\n",
            "Insira a altura de yuri em metros: 1.20\n",
            "Insira o nome da pessoa (ou digite 'sair' para encerrar): paulo\n",
            "Insira a altura de paulo em metros: 1.45\n",
            "Insira o nome da pessoa (ou digite 'sair' para encerrar): sair\n",
            "A pessoa mais alta é depay com 1.57 metros.\n",
            "A pessoa mais baixa é yuri com 1.2 metros.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Lista, laços e Condicionais\n",
        "3) Descrição: Crie uma listacom cinco números inteiros. Use um laço de repetição e uma condicional para imprimir apenas os números que são múltiplos de 3.\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "o6GOjIQEi7gp"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "numeros = [11, 16, 24, 10, 31]\n",
        "\n",
        "for numero in numeros:\n",
        "    if numero % 3 == 0:\n",
        "        print(numero)"
      ],
      "metadata": {
        "id": "4q9d0I2FjKrC",
        "outputId": "5a7b8614-4347-437a-9cee-c4e5a73f41a3",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "24\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Manipulação de Strings e Condicionais\n",
        "4) Descrição: Crie uma string com uma frase. Use uma condicional para verificar se a frase contém a palavra \"Python\". Se sim, substitua a palavra \"Python\" por \"programação\" e imprima a nova frase."
      ],
      "metadata": {
        "id": "aMFw5nvwjK_A"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "frase = \"Estou aprendendo Python e é muito legal!\"\n",
        "\n",
        "if \"Python\" in frase:\n",
        "    nova_frase = frase.replace(\"Python\", \"programação\")\n",
        "    print(nova_frase)\n",
        "else:\n",
        "    print(\"A palavra 'Python' não foi encontrada na frase.\")\n"
      ],
      "metadata": {
        "id": "S3OSByCToWU_",
        "outputId": "754287ba-4323-4e35-d0bb-cde15bfee2c8",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Estou aprendendo programação e é muito legal!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Simulação de Alfândega com Cadastro Dinâmico de Itens usando dicionário\n",
        "5) Simule uma situação de alfândega onde o funcionário cadastra itens novos encontrados na mala de uma pessoa que veio de uma viagem internacional. Após o cadastro de todos os itens, o programa imprime uma nota com todos os itens e seus preços, calcula o valor total e, se o valor total ultrapassar 500 dólares, calcula o valor de 60% a ser pago."
      ],
      "metadata": {
        "id": "CCQ04ZvSoXFD"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "itens = {}\n",
        "\n",
        "while True:\n",
        "    item = input(\"Nome do item (ou 'sair' para encerrar): \")\n",
        "    if item.lower() == 'sair':\n",
        "        break\n",
        "    preco = float(input(f\"Preço de {item} em dólares: \"))\n",
        "    itens[item] = preco\n",
        "\n",
        "valor_total = sum(itens.values())\n",
        "\n",
        "print(\"\\nNota da Alfândega:\")\n",
        "for item, preco in itens.items():\n",
        "    print(f\"{item}: ${preco:.2f}\")\n",
        "\n",
        "print(f\"\\nValor total: ${valor_total:.2f}\")\n",
        "\n",
        "if valor_total > 500:\n",
        "    taxa = valor_total * 0.60\n",
        "    print(f\"\\nValor a ser pago (60% do total): ${taxa:.2f}\")\n",
        "else:\n",
        "    print(\"Não há taxa a ser paga.\")"
      ],
      "metadata": {
        "id": "jK7Qkx8focJ4",
        "outputId": "dddf0d28-8e9f-481f-81e3-6177e5210020",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Nome do item (ou 'sair' para encerrar): pão\n",
            "Preço de pão em dólares: 4\n",
            "Nome do item (ou 'sair' para encerrar): sair\n",
            "\n",
            "Nota da Alfândega:\n",
            "pão: $4.00\n",
            "\n",
            "Valor total: $4.00\n",
            "Não há taxa a ser paga.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Identificação de Palavras Negativas em um Texto\n",
        "6) Você vai criar um programa em Python para analisar um texto e identificar palavras que expressam pensamentos negativos. Para isso, você usará uma lista de palavras negativas fornecida e verificará quais dessas palavras estão presentes no texto fornecido pelo usuário. Exemplo de palavras negtivas, acrescente mais na lista: # Lista de palavras negativas palavras_negativas = ['triste', 'deprimido', 'ansioso', 'desapontado', 'frustrado']"
      ],
      "metadata": {
        "id": "F0TB82Wmocse"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "palavras_negativas = ['triste', 'deprimido', 'ansioso', 'desapontado', 'frustrado']\n",
        "\n",
        "texto = input(\"Digite um texto: \").lower()\n",
        "\n",
        "for palavra in palavras_negativas:\n",
        "    if palavra in texto:\n",
        "        print(f\"Palavra negativa encontrada: {palavra}\")"
      ],
      "metadata": {
        "id": "BmfL1pOsogB6",
        "outputId": "3d71ee5b-4988-469f-9c57-cb17db6a2b97",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Digite um texto: estou ansioso e triste\n",
            "Palavra negativa encontrada: triste\n",
            "Palavra negativa encontrada: ansioso\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Strings"
      ],
      "metadata": {
        "id": "HTR0Vq9ho-le"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 1 - Use o método len para imprimir o comprimento da string.\n"
      ],
      "metadata": {
        "id": "uGEOpGgRpccF"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "x = \"Hello World\"\n",
        "print(len(x))"
      ],
      "metadata": {
        "id": "Zn8QkLgIpitu",
        "outputId": "aca1bcf8-57e4-474e-efba-45e36031ecac",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "11\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 2 - Obtenha o primeiro caractere da string txt."
      ],
      "metadata": {
        "id": "xsJbQZkZpl3V"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "txt = \"Hello World\"\n",
        "x = txt[0]\n",
        "print(x)"
      ],
      "metadata": {
        "id": "YDl67FlIqDWU",
        "outputId": "593c5f9d-7e97-4a98-881c-d6fc0267c17a",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "H\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 3 - Obtenha os caracteres do índice 2 ao índice 4 ( llo).\n"
      ],
      "metadata": {
        "id": "ZbeXUxrsqX4L"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "txt = \"Hello World\"\n",
        "x = txt[2:5]\n",
        "print(x)"
      ],
      "metadata": {
        "id": "_FnzVZGhqvqG",
        "outputId": "ebe0fe31-ae3e-4913-9023-7130e33bdb41",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "llo\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 4 - Converta o valor de txt para maiúsculas.\n"
      ],
      "metadata": {
        "id": "Y3D7uvN-qz8E"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "txt = \"Hello World\"\n",
        "txt = txt.upper()\n",
        "print(txt)"
      ],
      "metadata": {
        "id": "MCpBRvzNq2PM",
        "outputId": "c13c038c-45b6-4dac-8914-1648074b0ef3",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "HELLO WORLD\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 5 - Conte quantas vezes aparece a palavra \"de\" na string abaixo"
      ],
      "metadata": {
        "id": "eRoSCcBgq46s"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "txt = \"Eu gosto de vijar, tomar vinho, de estudar estudar programação, de estudar Pyhon\"\n",
        "txt = txt.count(\"de\")\n",
        "print(txt)"
      ],
      "metadata": {
        "id": "wxLM22bWq79C",
        "outputId": "d98869fc-b826-41ff-abb3-eda3032a0002",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "3\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 6 - Separe a frase abaixo toda vez que encontrar um vírgula"
      ],
      "metadata": {
        "id": "GsQhLA3Qq-e2"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "txt = \"Eu gosto de vijar, tomar vinho, de estudar estudar programação, de estudar Pyhon\"\n",
        "txt = txt.split(\",\")\n",
        "print(txt)"
      ],
      "metadata": {
        "id": "NESfbPJDrA-0",
        "outputId": "5d3f84ed-74f6-4c0e-d945-585e1c750094",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['Eu gosto de vijar', ' tomar vinho', ' de estudar estudar programação', ' de estudar Pyhon']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#7 - Peça ao usuário uma frase e substitua todas as ocorrências de espaço por “#”.\n"
      ],
      "metadata": {
        "id": "Zz5GIgc9rDcA"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "frase = input(\"Digite uma frase.\")\n",
        "frase2 = frase.replace(' ', '#')\n",
        "print(frase2)"
      ],
      "metadata": {
        "id": "8fOS5_EIrK19",
        "outputId": "214b533d-dd8c-4ca7-cb05-736c8759b096",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Digite uma frase.depay joga muito\n",
            "depay#joga#muito\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 8 - Faça um programa que retorne True se duas strings lidas do teclado são palíndromas mútuas, ou seja, se uma é igual à outra quando lida de traz para frente ou False, se não forem.\n",
        "# Por exemplo: amor e roma\n"
      ],
      "metadata": {
        "id": "94dHcw4lrF6a"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "frase = input(\"insira uma frase palíndroma:\")\n",
        "frase2 = frase[::-1]\n",
        "if frase2 == frase:\n",
        "  print(\"True\")\n",
        "else:\n",
        "  print(\"False\")"
      ],
      "metadata": {
        "id": "39FkmQXfrLYt",
        "outputId": "8ff7e345-1839-40ce-d941-8ff417ab24a1",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "insira uma frase palíndroma:lanche com batata\n",
            "False\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 9- Faça um programa que leia o nome do usuário e mostre o nome de traz para frente, utilizando somente letras maiúsculas."
      ],
      "metadata": {
        "id": "Rhw6OBZBrJbe"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "palavra = input(\"Digite seu nome: \")\n",
        "palavra = palavra.upper()\n",
        "palavra = palavra[::-1]\n",
        "print(palavra)"
      ],
      "metadata": {
        "id": "GVZayVcDrOBA",
        "outputId": "ff9d93c6-903c-4ca3-a361-fd22332b7792",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Digite seu nome: depay\n",
            "YAPED\n"
          ]
        }
      ]
    }
  ]
}